//
//  ViewController.swift
//  CandleShop
//
//  Created by Александра on 04.10.2022.
//

import UIKit


class ViewController: UIViewController {

  override func viewDidLoad() {
    super.viewDidLoad()

    view.backgroundColor = .cyan

    

  }


}


//:ООП
//абстракция - это мы не работаем с деталями
//инкапсуляция - это про уровни доступа
//наследованиеё
//полиморфизм - способность обьекта использовать методы производного класса, который не существует на момент создания базового
//:Документация
/// это описание документации

//:SOLID
//solid
/*
 S: Single Responsibility Principle (Принцип единственной ответственности).
 O: Open-Closed Principle (Принцип открытости-закрытости).
 L: Liskov Substitution Principle (Принцип подстановки Барбары Лисков).
 I: Interface Segregation Principle (Принцип разделения интерфейса).
 D: Dependency Inversion Principle (Принцип инверсии зависимостей).
 */

//один класс должен выполнять одну роль. Не должен класс вывода информации считать какую-то логику.
//Программные сущности (классы, модули, функции) должны быть открыты для расширения, но не для модификации.
//Необходимо, чтобы подклассы могли бы служить заменой для своих суперклассов.
//Создавайте узкоспециализированные интерфейсы, предназначенные для конкретного клиента. Клиенты не должны зависеть от интерфейсов, которые они не используют.
//Объектом зависимости должна быть абстракция, а не что-то конкретное.

//:Управление памятью
    //управление памятью
//если мы дублируем объект, в памяти он копируется только после изменения
//в куче хранятся объекты класса, а структуры в стеке
    //=== два адреса ссылаются на один и тот же дом, работает только с классами
  
